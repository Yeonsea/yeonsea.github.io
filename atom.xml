<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Đinh Giang</title>
  
  <subtitle>人生は意味が、唯一の生活をすることができますが见つかりました楽しいこと、 のような花が见つかる、あなた様と私が见つかりました</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yeonsea.club/"/>
  <updated>2019-09-10T08:13:02.399Z</updated>
  <id>http://yeonsea.club/</id>
  
  <author>
    <name>J</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch概览</title>
    <link href="http://yeonsea.club/2019/09/10/Elasticsearch%E6%A6%82%E8%A7%88/"/>
    <id>http://yeonsea.club/2019/09/10/Elasticsearch概览/</id>
    <published>2019-09-10T08:11:35.000Z</published>
    <updated>2019-09-10T08:13:02.399Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>全文搜索引擎<br>基于 Lucene 构建的开源、分布式、RESTful接口</p><p><a href="还是一个分布式文档数据库">^1</a></p><blockquote><p>Github 的搜索是基于 Elasticsearch 构建的，只索引项目主分支，但包括20亿个索引文档，30TB的索引文件</p></blockquote><p>Shay Banon  失业开发者  给妻子构建食谱搜索引擎  早期版本的 Lucene  为方便Java可以在应用中增加搜索功能  第一个开源项目“Compass”</p><p>重写 Compass 使其成为一个独立的项目，Elasticsearch  </p><ul><li>横向可扩展</li><li>分片机制提供更好的分布性：sharding，类似 HDFS 的块机制</li><li>高可用：replica</li><li>使用简单</li></ul><p>Lucene：最初由 Doug Cutting 开发</p><p><em>倒排索引</em></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>术语概念</p><ul><li>索引词：term</li><li>文本：text</li><li>分析：Analysis</li><li>集群：Cluster</li><li>节点：node</li><li>路由：routing</li><li>分片：shard</li><li>主分片：primary shard</li><li>副本分片：replica shard</li><li>副本：replica</li><li>索引：index 索引是具有相同结构的文档集合</li><li>类型：type 类型是索引的逻辑分区</li><li>文档：document  存储的一个 JSON 格式的字符串</li><li>映射：mapping</li><li>字段：field</li><li>开源字段：source field</li><li>主键：ID</li></ul><blockquote><p>每个 Elasticsearch 分片是一个 Lucene 的索引，有文档存储数量限制</p></blockquote><p>JSON  轻量级数据交换格式</p><h3 id="对外接口"><a href="#对外接口" class="headerlink" title="对外接口"></a>对外接口</h3><p>curl<br>REST：REpresentational State Transfer  表述性状态传输    一种约定    简化沟通成本</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引管理</p><ul><li>创建</li><li>删除</li><li>获取</li><li>打开 关闭</li></ul><p>索引映射管理</p><ul><li>增加映射</li><li>获取索引</li></ul><p>索引别名</p><ul><li>过滤索引别名</li><li>删除别名</li><li>查询现有的别名</li></ul><p>索引配置</p><ul><li>更新索引配置</li><li>获取配置</li><li>索引分析</li></ul><p>索引模板</p><blockquote><p>索引模板就是创建好一个索引参数设置 settings 和 映射 mapping 的模板，在创建新索引的时候指定模板名称就可以使用模板定义好的参数设置和映射</p><ul><li>创建</li><li>删除</li><li>获取</li></ul></blockquote><p>复制配置</p><p>重建索引</p><h3 id="索引监控"><a href="#索引监控" class="headerlink" title="索引监控"></a>索引监控</h3><ul><li>索引统计</li><li>索引分片</li><li>索引恢复</li><li>索引分片存储</li></ul><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><ul><li>清除缓存</li><li>索引刷新</li><li>冲洗</li><li>合并索引</li></ul><h3 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h3><ul><li>增加文档</li><li>更新删除</li><li>查询</li><li>多文档操作</li><li>索引词频率</li><li>查询更新接口</li></ul><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>映射是定义存储和索引文档以及字段的过程</p><ul><li>字段数据类型</li><li>元字段</li><li>映射参数</li><li>动态映射：在 Elasticsearch 中可以不事先建好索引结构，在使用的时候可以直接插入文档到索引。</li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="深入搜索"><a href="#深入搜索" class="headerlink" title="深入搜索"></a>深入搜索</h3><h4 id="搜索方式"><a href="#搜索方式" class="headerlink" title="搜索方式"></a>搜索方式</h4><ul><li>URL 搜索 GET方式</li><li>POST 请求参数搜索</li><li>排序 sort</li><li>数据列过滤</li><li>脚本支持<h4 id="重新评分"><a href="#重新评分" class="headerlink" title="重新评分"></a>重新评分</h4>对短语进行重新评分，然后再查询<h4 id="滚动查询请求"><a href="#滚动查询请求" class="headerlink" title="滚动查询请求"></a>滚动查询请求</h4>Elasticsearch 提供了滚动 API 来解决此问题，这有点像数据库中的游标<h4 id="隐藏内容查询"><a href="#隐藏内容查询" class="headerlink" title="隐藏内容查询"></a>隐藏内容查询</h4>inner hits    嵌套结构<h4 id="相关搜索函数"><a href="#相关搜索函数" class="headerlink" title="相关搜索函数"></a>相关搜索函数</h4></li><li>Preference  搜索分片副本执行偏好设置</li><li>索引加权  index_boost</li><li>最小分值  min_score</li><li>分值解释  explain  可以使每个命中的查询解释它的得分是如何计算出来的</li><li>分片情况查询  _search_shards</li><li>总分查询  _count</li><li>是否存在查询</li><li>验证接口<h4 id="搜索模板"><a href="#搜索模板" class="headerlink" title="搜索模板"></a>搜索模板</h4><h3 id="查询DSL"><a href="#查询DSL" class="headerlink" title="查询DSL"></a>查询DSL</h3>Domain-specific Language<br>Elasticsearch 提供了基于 JSON 的完整查询 DSL 来定义查询<h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4></li><li>布尔查询</li><li>短语查询</li><li>短语前缀查询</li><li>多字段查询</li><li>Lucene 语法查询</li><li>简化查询<h4 id="字段查询"><a href="#字段查询" class="headerlink" title="字段查询"></a>字段查询</h4></li><li>单字段查询</li><li>多字段查询</li><li>范围查询<h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4></li><li>常数得分查询</li><li>布尔查询</li><li>最大值获取查询</li><li>boosting 查询</li><li>指定索引查询</li><li>过滤查询</li><li>限制查询<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="- 连接查询"></a>- 连接查询</h4></li><li>嵌套查询</li><li>父子文档查询<h4 id="地理查询"><a href="#地理查询" class="headerlink" title="地理查询"></a>地理查询</h4>Elasticsearch 支持两种地理数据类型的字段：地理点类型，支持经度纬度对；地理形状类型，支持点、线、圈、多边形、多边形集合等。</li><li>地理形状查询</li><li>地理范围查询</li><li>地理距离查询</li><li>地理距离范围查询</li><li>多边形地理查询</li><li>地理散列单元查询<h4 id="跨度查询"><a href="#跨度查询" class="headerlink" title="跨度查询"></a>跨度查询</h4></li><li>索引词跨度查询</li><li>多索引词跨度查询</li><li>首跨度查询</li><li>接近跨度查询</li><li>或跨度查询</li><li>非跨度查询</li><li>包含跨度查询</li><li>内部跨度查询<h4 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h4>Elasticsearch 中的高亮显示是来源于 Lucene 的功能，允许一个或者多个字段上突出显示搜索内容<h3 id="简化查询"><a href="#简化查询" class="headerlink" title="简化查询"></a>简化查询</h3>catAPI<br>常用简化查询指标</li><li>indices</li><li>nodes</li><li>recovery</li><li>thread pool</li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><h3 id="聚合分类"><a href="#聚合分类" class="headerlink" title="聚合分类"></a>聚合分类</h3><h4 id="度量聚合"><a href="#度量聚合" class="headerlink" title="度量聚合"></a>度量聚合</h4><ul><li>平均值聚合</li><li>基数聚合</li><li>最大值聚合</li><li>最小值聚合</li><li>和聚合</li><li>值基数聚合</li><li>统计聚合</li><li>百分比聚合</li><li>百分比分级聚合</li><li>最高命中排行聚合</li><li>脚本度量聚合</li><li>地理边界聚合</li><li>地理重心聚合</li></ul><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><ul><li>子聚合</li><li>直方图聚合</li><li>日期直方图聚合</li><li>时间范围聚合</li><li>范围聚合</li><li>过滤聚合</li><li>多重过滤聚合</li><li>空值聚合</li><li>嵌套聚合</li><li>采样聚合</li><li>重要索引词聚合</li><li>索引词聚合</li><li>总体聚合</li><li>地理点距离聚合</li><li>地理散列网格聚合</li><li>IPv4 范围聚合<h3 id="管道聚合"><a href="#管道聚合" class="headerlink" title="管道聚合"></a>管道聚合</h3></li><li>平均分组聚合</li><li>移动平均聚合</li><li>总和分组聚合</li><li>总和累计聚合</li><li>最大分组聚合</li><li>最小分组聚合</li><li>统计分组聚合</li><li>百分位分组聚合</li><li>差值聚合</li><li>分组脚本聚合</li><li>串行差分聚合</li><li>分组选择器聚合</li></ul><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><h3 id="集群节点监控"><a href="#集群节点监控" class="headerlink" title="集群节点监控"></a>集群节点监控</h3><blockquote><p>对 Elasticsearch 监控的API 主要有三类：一类是集群相关的，以_cluster开头，第二类是监控节点相关的，以_nodes开头，第三类是任务相关的，以_tasks开头</p><ul><li>集群健康值</li><li>集群状态</li><li>集群统计</li><li>集群任务管理</li><li>待定集群任务</li><li>节点信息</li><li>节点统计</li></ul></blockquote><h3 id="集群分片迁移"><a href="#集群分片迁移" class="headerlink" title="集群分片迁移"></a>集群分片迁移</h3><ul><li>移动  remove</li><li>取消  cancel</li><li>分配  allocate</li><li>集群配置更新<h3 id="集群节点配置"><a href="#集群节点配置" class="headerlink" title="集群节点配置"></a>集群节点配置</h3></li><li>主节点  主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是集群的一部分，并决定哪些分片分配给相关的节点。</li><li>数据节点  主要是存储索引数据的节点，主要对文档进行增删改查、聚合操作等。</li><li>客户端节点  当主节点和数据节点配置都设置为 false 时，该节点只能处理路由请求，处理搜索，分发索引操作等，从本质上来说该客户端节点表现为智能负载平衡器。独立的客户端节点在一个比较大的集群中是非常有用的，它协调主节点和数据节点，客户端节点加入集群可以得到集群的状态，根据集群的状态可以直接发送路由请求。</li><li>部落节点  部落节点可以跨越多个集群，它可以接收每个集群的状态，然后合并成一个全局集群的状态，它可以读写所有节点上的数据。<h3 id="节点发现"><a href="#节点发现" class="headerlink" title="节点发现"></a>节点发现</h3></li><li>ping 模块</li><li>单播模块<h4 id="主节点选举"><a href="#主节点选举" class="headerlink" title="主节点选举"></a>主节点选举</h4>在集群中，系统会自动通过 ping 来进行选举节点或者加入主节点，这些都是自动完成的。<h4 id="故障检测"><a href="#故障检测" class="headerlink" title="故障检测"></a>故障检测</h4><h4 id="集群平衡配置"><a href="#集群平衡配置" class="headerlink" title="集群平衡配置"></a>集群平衡配置</h4></li><li>分片分配设置</li><li>基于磁盘的配置</li><li>分片智能分配</li><li>分片配置过滤</li><li>其他集群配置<h2 id="索引分词器"><a href="#索引分词器" class="headerlink" title="索引分词器"></a>索引分词器</h2><h3 id="分词器的概念"><a href="#分词器的概念" class="headerlink" title="分词器的概念"></a>分词器的概念</h3><em>分词器analyzer的作用是当一个文档被索引的时候，分词器从文档中提取出若干词元token来支持索引的存储和搜索。</em><blockquote><p>分词器 是由一个分解器 tokenizer、零个或多个词元过滤器 token filters 组成。</p></blockquote><h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3></li><li>smartcn</li><li>IKAnanlyzer<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3></li><li>java 插件  jar</li><li>站点插件  js html css</li><li>混合插件<h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4>正常情况下插件位于$ES_HOME/bin 下<br>通过rpm等安装的位置可能会不同<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4></li><li>查询插件</li><li>删除插件</li><li>Silent/Verbose 参数  更多调试信息</li><li>自定义配置目录</li><li>超时设置</li><li>代理设置</li><li>自定义插件目录</li><li>强制插件</li></ul><h4 id="插件清单"><a href="#插件清单" class="headerlink" title="插件清单"></a>插件清单</h4><ul><li>API 插件</li><li>报警插件</li><li>分词插件</li><li>发现插件</li><li>管理和站点插件</li></ul><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><blockquote><p>在Elasticsearch 的配置中，主要有两种配置方式，一种是静态配置，另一种是动态配置。静态配置的参数只能在配置文件中事先写好，动态配置的参数可以通过_cluster/settings进行设置。</p></blockquote><h3 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h3><ul><li>本地网关配置</li><li>HTTP 配置</li><li>网络配置  常用网络配置，高级网络配置，高级TCP配置，传输和HTTP协议</li><li>传输配置  TCP传输，本地传输，传输追踪<h3 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h3></li><li>脚本使用</li><li>脚本配置  索引脚本，启用动态脚本，脚本自动重载，本地java脚本，lucene表达式脚本，得分，文档字段，保存的字段，在脚本中访问文档的得分，源字段，Groovy内置方法<h3 id="快照和恢复配置"><a href="#快照和恢复配置" class="headerlink" title="快照和恢复配置"></a>快照和恢复配置</h3></li><li>只读仓库</li><li>快照</li><li>恢复</li><li>快照状态<h3 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h3><h4 id="线程池类型"><a href="#线程池类型" class="headerlink" title="线程池类型"></a>线程池类型</h4></li><li>cached 线程池是一个无限的线程池，如果存在挂起的请求时，就会产生一个线程。这个线程池用来防止提交的请求被阻塞或丢弃。</li><li>fixed 线程池拥有固定大小的线程来操作队列中的请求（任意界限）直到请求没有线程提供服务。size参数控制线程的数量，queue_size 参数可以控制没有线程执行的请求队列的大小。默认设置为-1，意味着无限大。当请求到达而且队列已经满了，请求会被终止。</li><li>scaling 线程池拥有动态数量的线程。线程的数量与工作量成正比，并且在1和size参数值之间变化。keep_alive参数决定一个线程的空闲时间。</li></ul><h4 id="处理器设置"><a href="#处理器设置" class="headerlink" title="处理器设置"></a>处理器设置</h4><p>处理器的数量是自动检测的，线程池的设置会基于结果自动设置。有时，处理器的数量会被错误检测，在这种情况下，处理器的数量可以使用 processes进行明确设置。</p><h3 id="索引配置"><a href="#索引配置" class="headerlink" title="索引配置"></a>索引配置</h3><blockquote><p>索引模块是控制每个索引指标的模块。索引模块包括分词、分片控制和分配、字段映射、索引相似性配置、慢查询记录、文件系统配置、控制事务和刷新模块。</p></blockquote><h4 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h4><ul><li>总内存控制</li><li>列数据内存控制</li><li>请求内存控制</li><li>数据缓存</li><li>节点查询缓存</li><li>索引缓冲区</li><li>分片请求缓存</li><li>索引恢复</li><li>TTL区间<h4 id="索引分片分配"><a href="#索引分片分配" class="headerlink" title="索引分片分配"></a>索引分片分配</h4></li><li>碎片分配过滤</li><li>延迟分配</li><li>每个节点的总碎片<h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><blockquote><p>一个 Elasticsearch 分片就是一个 Lucene 索引，Lucene索引被分解为分片。分片是索引的内部存储单元，存储索引数据并且是不变的。周期性合并(merge)小的分片为更大的分片来保持索引大小在范围内。</p></blockquote><h4 id="相似模块"><a href="#相似模块" class="headerlink" title="相似模块"></a>相似模块</h4></li><li>配置相似性</li><li>可用的相似性模块<h4 id="响应慢日志监控"><a href="#响应慢日志监控" class="headerlink" title="响应慢日志监控"></a>响应慢日志监控</h4></li><li>搜索慢日志</li><li>索引慢日志<h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4>支持存储类型</li><li>simplefs  简单文件系统类型</li><li>niofs  NIO 文件系统类型</li><li>mmapfs  MMap 文件系统类型在文件系统上通过映射文件到内存(mmap)存储分片索引</li><li>default_fs  默认类型是 NIO FS 和 MMapFS 的混合，对每个类型的文件选择最佳文件系统<h4 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h4></li><li>冲洗设置</li><li>事务日志设置</li></ul><h2 id="告警、监控和权限管理"><a href="#告警、监控和权限管理" class="headerlink" title="告警、监控和权限管理"></a>告警、监控和权限管理</h2><h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h3><p>Watcher 是进行警告和通知的插件，可以根据数据的变化采取行动。它的设计原理是在 Elasticsearch 中执行查询，满足条件的情况下，产生告警。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>Trigger</li><li>Inputs</li><li>Condition</li><li>Transform</li><li>Action<h4 id="告警输出配置"><a href="#告警输出配置" class="headerlink" title="告警输出配置"></a>告警输出配置</h4>告警输出可以为邮件、Webhook、Logging、HipChat、Slack、PagerDuty<h4 id="告警管理"><a href="#告警管理" class="headerlink" title="告警管理"></a>告警管理</h4></li><li>列出警告</li><li>删除警告<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><blockquote><p>Marvel 是商业监控方案，用来监控 Elasticsearch 集群历史状态的有力工具，便于性能优化以及故障诊断。监控主要分为六个层面，分别是集群层、节点层、索引层、分片层、事件层、Sense。</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li>监控参数配置</li><li>监控索引配置</li><li>Kibana 配置相关</li><li>Tribe 部落节点监控配置<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><blockquote><p>Shield 是商业权限管理插件，它可以保护 Elasticsearch 中的数据，采用加密的通信密码，基于角色的访问控制，IP过滤和审计等。</p></blockquote><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4>Shield 是 Elasticsearch 的一个插件，一旦安装完成，插件将会拦截所有 API 请求，然后对请求进行认证和授权的校验。该插件同时提供 SSL 安全协议来传输网络数据，该插件提供了审计日志记录的能力，用来进行验证和审计。</li><li>用户认证</li><li>授权</li><li>节点认证和信道加密</li><li>IP 过滤</li><li>审计<h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4>用户认证方式</li><li>Native  一个内置的本地认证系统，默认可用</li><li>File  一种内置的基于文件的认证系统，默认可用</li><li>LDAP  通过外部轻量级目录协议进行身份验证</li><li>AD  通过外部活动目录服务的身份验证</li><li>PKI  通过使用可信的X.509证书的认证<br>匿名用户访问<h4 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h4></li><li>增加角色</li><li>查看角色</li><li>删除角色</li></ul><h2 id="ELK-应用"><a href="#ELK-应用" class="headerlink" title="ELK 应用"></a>ELK 应用</h2><ul><li>Logstash  是一个灵活的开放源码的数据收集、处理、传输的工具。Logstash 可以处理日志、事件、非结构化的数据，并把它们输出出来，包括可以输出到 Elasticsearch 中。</li><li>Kibana  是一个开源的数据可视化平台，可以把数据以强大的图形化方式展示出来。从柱状图到地图等，它可以通过多个图表的组合来生成更为强大的仪表面板，帮助人们理解、分析和分享数据。</li></ul><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h4 id="配置文件的结构"><a href="#配置文件的结构" class="headerlink" title="配置文件的结构"></a>配置文件的结构</h4><p>配置文件由输入，过滤，输出三部分组成，每部分都是由插件构成的，这些插件负责处理日志的不同过程</p><h4 id="事件相关配置"><a href="#事件相关配置" class="headerlink" title="事件相关配置"></a>事件相关配置</h4><blockquote><p>每个事件都有不同的属性，比如 apache 的访问日志，可以包括状态码、协议、路径、客户端 IP等，在 Logstash 中这些属性叫做 fields。由于它们是事件属性，所以这些配置选项只会在过滤器和输出块中工作。</p></blockquote><h4 id="插件管理-1"><a href="#插件管理-1" class="headerlink" title="插件管理"></a>插件管理</h4><p>插件管理器通过 bin/logstash-plugin 的脚本来管理整个插件的生命周期，通过命令行接口(CLI)调用可以安装、卸载、升级插件。</p><ul><li>输入插件</li><li>过滤插件</li><li>输出插件</li><li>编解码插件<h3 id="Kibana-配置"><a href="#Kibana-配置" class="headerlink" title="Kibana 配置"></a>Kibana 配置</h3>安装比较简单，也是绿色的，解压后直接运行默认端口 5601。<h4 id="Discover"><a href="#Discover" class="headerlink" title="Discover"></a>Discover</h4></li><li>新的搜索</li><li>保存搜索加载保存的搜索</li><li>自动刷新</li><li>查看字段数据统计<h4 id="Visualize"><a href="#Visualize" class="headerlink" title="Visualize"></a>Visualize</h4>视图是定制可视化报表的地方</li></ul><ol><li>选择一个图标类型</li><li>选择一个数据源</li><li>可视化编辑器配置</li><li>保存编辑器<h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4>仪表盘是用一组原始图标根据需要组合成一个丰富的图形报表</li></ol><ul><li>空仪表盘</li><li>创建仪表盘</li><li>保存仪表盘</li><li>加载仪表盘</li><li>共享仪表盘<h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4></li><li>索引设置</li><li>管理字段</li><li>告警设置</li><li>Kibana 服务器配置</li><li>管理搜索，可视化仪表板<h2 id="Elasticsearch-5-0-的特性与改进"><a href="#Elasticsearch-5-0-的特性与改进" class="headerlink" title="Elasticsearch 5.0 的特性与改进"></a>Elasticsearch 5.0 的特性与改进</h2></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于分布式系统的稳定性</title>
    <link href="http://yeonsea.club/2019/08/25/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <id>http://yeonsea.club/2019/08/25/关于分布式系统的稳定性/</id>
    <published>2019-08-25T10:40:48.000Z</published>
    <updated>2019-09-10T08:05:36.131Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><ul><li>堆栈信息</li><li>访问用户 IP、请求 URL、应用响应时间</li><li>内存回收信息</li><li>自定义信息</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>通过异常堆栈，可以定位到谁宕机了</li><li>产生问题的程序行，对异常进行修复</li><li>访问 IP 和请求参数，排查是否遭到攻击，以及攻击的形式</li><li>应用的响应时间、垃圾回收以及系统 load 来判断系统负载，是否要增加机器</li><li>线程 dump，判断是否死锁及线程阻塞的原因</li><li>应用的 GC 日志，对系统代码和 JVM 内存参数进行优化，减少 GC 次数与 stop the world 时间，优化应用响应时间</li></ul><h2 id="集群监控"><a href="#集群监控" class="headerlink" title="集群监控"></a>集群监控</h2><p>木桶原理</p><h3 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h3><ul><li>load：linux 中，可以通过 top,uptime来查看系统load值，系统load定义为特定时间间隔内运行队列中的平均线程数。</li><li>cpu 利用率</li><li>磁盘剩余空间</li><li>网络 traffic</li><li>磁盘 IO</li><li>内存使用</li><li>qps    query per second</li><li>rt    response time</li><li>select/ps</li><li>update/ps、delete/ps</li><li>GC    JVM 虚拟机开发团队一直致力于消除或者减少工作线程因内存回收而导致的停顿，用户线程的停顿时间在不断地缩短，但是仍然没办法完全消除</li></ul><h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><blockquote><p>对于自治的分布式系统而言，一般都有一整套的集群心跳检测机制，能够实时地移除掉宕机的 Slave，避免路由规则将任务分配给已宕机的机器来处理。<br>而如果是 Master 宕机，集群能够自动地进行 Master 的选举，从而避免由 Master 宕机而导致整个集群不能提供服务的情况发生，这一类系统，如 ZooKeeper，便是一个很好的典范。也有一部分系统可以通过外部干预，使备份机器 stand by，或者是双机互为备份，以实现故障切换，如 MySQL、Nginx等，以避免单点故障的发生。</p></blockquote><p>具体操作：</p><ul><li>ping</li><li>应用层检测    curl 定时访问应用中预留的自检 url</li><li>业务检测    可在 response 的 header 中约定一个值，来标识返回的结果是否正常</li></ul><h3 id="容量评估及应用水位"><a href="#容量评估及应用水位" class="headerlink" title="容量评估及应用水位"></a>容量评估及应用水位</h3><p>当前水位 = 当前总 qps / （单台机器极限 x 机器数）x 100%</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h3 id="流量控制实施"><a href="#流量控制实施" class="headerlink" title="流量控制实施"></a>流量控制实施</h3><p>多个维度</p><ul><li>对系统的总并发请求数进行限制 - 可以很好地控制系统的负载，避免出现流量突增将系统压垮的情况</li><li>限制单位时间内的请求次数（如限制qps） - 限制调用频次，防止某个外部调用的流量突增影响到服务本身的稳定性</li><li>通过白名单机制来限制每一个接入系统调用的频率等</li></ul><p>超载的部分流量</p><ul><li>直接返回，显示系统繁忙</li><li>通过单机内存队列来进行有限的等待</li><li>通过分布式消息队列来将用户的请求异步化</li></ul><h3 id="服务稳定性"><a href="#服务稳定性" class="headerlink" title="服务稳定性"></a>服务稳定性</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>服务消费日志</p><h4 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h4><blockquote><p>对于调用超时的非核心服务，可以设定一个阈值，如果调用超时的次数超过这个阈值，便自动将该服务降级。此时服务调用者跳过对该服务的调用，并指定一个休眠的时间点，当时间点过了以后，再次对该服务进行重试，如果服务恢复，则取消降级，否则继续保持该服务的降级状态，直到所依赖的服务故障恢复。</p></blockquote><h4 id="服务分级"><a href="#服务分级" class="headerlink" title="服务分级"></a>服务分级</h4><h4 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h4><blockquote><p>当系统负载较高，即将突破警戒水位时，如何通过实时地屏蔽一些非核心链路的调用来降低系统的负载呢？这时需要系统预先定义一些开关控制程序的服务提供策略。开关通过修改一些预先定义好的全局变量，来控制系统的关键路径和逻辑。</p></blockquote><h4 id="应急预案"><a href="#应急预案" class="headerlink" title="应急预案"></a>应急预案</h4><h3 id="高并发系统设计"><a href="#高并发系统设计" class="headerlink" title="高并发系统设计"></a>高并发系统设计</h3><blockquote><p>高并发系统与普通系统设计的区别在于，既要保障系统的可用性和可扩展性，又要兼顾数据的一致性，还要处理多线程同步的问题。<br><em>任何细微问题，都有可能在高并发环境下被无限地放大，直至系统宕机</em></p></blockquote><h4 id="操作原子性"><a href="#操作原子性" class="headerlink" title="操作原子性"></a>操作原子性</h4><blockquote><p>原子操作指的是不可分割的操作，它要么执行成功，要么执行失败，不会产生中间状态。<br>原子操作也是一些常见的多线程程序bug的源头。<br>并发相关的问题对于测试来说，并不是每次都能重现，因此处理起来十分棘手。<br>JDK5.0 以后开始提供 Atomic Class，支持 CAS compare and set 等一系列原子操作，来帮助我们简化多线程程序设计。<br>数据count统计</p><ul><li>CountDownLatch是做减法，CyclicBarrier是做加法,Semaphor的临界资源可以反复使用</li><li>CountDownLatch不能重置计数，CycliBarrier提供的reset()方法可以重置计数，不过只能等到第一个计数结束。Semaphor可以重复使用。</li><li>CountDownLatch和CycliBarrier不能控制并发线程的数量，Semaphor可以实现控制并发线程的数量。<br>AtomicInteger compareAndSet 方法 调用 Unsafe 对象的 native 方法 compareAndSwapInt 方法，最终通过 Atomic::com::(x, addr, e)来实现原子操作</li></ul></blockquote><p>数据库的事务操作<br>数据库事务具有 ACID 属性<br>导致事务失败的原因有很多：</p><ul><li>修改不符合表的约束规则</li><li>网络异常</li><li>存储介质故障</li></ul><blockquote><p>为了实现数据库状态的恢复，DBMS 系统通常需要维护事务日志以追踪事务中所有影响数据库数据的操作，以便执行失败时进行事务的回滚。<br>事务日志可以提高事务执行的效率，存储引擎只需要将修改行为持久到事务日志当中，便可以只对该数据在内存中的拷贝进行修改，而不需要每次修改都将数据回写到磁盘。<br>日志写入是一小块区域的顺序IO，而数据库数据的磁盘回写则是随机IO，磁头需要不停地移动来寻找需要更新数据的位置。</p></blockquote><h4 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h4><p>多线程同步指的是线程之间执行的顺序，多个线程并发地访问和操作同一数据，并且执行的结果与访问或者操作的次序有关。</p><ul><li>synchronized</li><li>ReentrantLock<blockquote><p>ReentrantLock 的好处是，等待是可以中断的。通过 tryLock(timeout, unit)，可以尝试获得锁，并且指定等待时间。另一个特性是可以在构造 ReentrantLock 时使用公平锁，公平锁指的是多个线程在等待同一个锁时，必须按照申请锁的先后顺序依次获得锁。synchronized 中的锁是非公平的，默认情况下 ReentrantLock 也是非公平的，但是可以在构造函数中指定使用公平锁。<br>对于 ReentrantLock 来说，还有一个十分实用的特性，它可以同时绑定多个 condition 条件，以实现更精细化的同步控制。</p></blockquote></li></ul><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><p>分布式系统常常通过复制数据来提高系统的可靠性和容错性，并且将数据的副本存放到不同的机器上。由于多个副本的存在，使得维护副本一致性的代价很高。因此，许多分布式系统都采用弱一致性或者最终一致性，来提高系统的性能和吞吐能力。</p><blockquote><p>最终一致性是弱一致性的一种特殊形式，这种情况下系统保证用户最终能够读取到某个操作对系统的更新，“不一致性窗口”的时间依赖于网络的延迟、系统的负载和副本的个数。<br>最终一致性举例：</p><ul><li>mysql 主从数据同步</li><li>zookeeper 的 leader election 和 atomic broadcas</li></ul></blockquote><h4 id="系统可扩展性"><a href="#系统可扩展性" class="headerlink" title="系统可扩展性"></a>系统可扩展性</h4><p>系统的可扩展性也成为可伸缩性，是一种对软件系统计算处理能力的评价指标。<br>只需要增加相应的机器，便能够使性能平滑地提升。<br><em>水平扩展相对于硬件的垂直扩展来说，对于软件设计的能力要求更高，系统设计更复杂，但却能够使系统处理能力几乎可以无限制扩展</em><br><em>系统的可扩展性也会受到一些因素的制约，CAP理论指出，系统的一致性、可用性和可扩展性三个要素对于分布式系统来说，很难同时满足。因此，在系统设计时，往往得做一些取舍。</em></p><h4 id="并发减库存"><a href="#并发减库存" class="headerlink" title="并发减库存"></a>并发减库存</h4><p>秒杀活动杜绝网络投机者使用工具导致不公平竞争：加速验证码，复杂验证码。</p><p>数据一致性问题：</p><blockquote><p>对于高并发访问的浏览型系统来说，单机数据库如不进行扩展，往往很难支撑。因此常常会采用分库技术来提高数据库的并发能力，并且通过使用分布式缓存技术，将磁盘磁头的机械运动化为内存的高低电平，以降低数据库的压力，加快后端的响应速度。响应的越快，线程释放的也越快，能够支持的单位时间内的查询数qps也越高，并发处理能力就越强。<br><em>带来的问题是跨数据库或者是分布式缓存与数据库之间难以进行事务操作。</em><br>为了避免数据不一致的情况发生，并且保证前端页面能够在高并发情况下正常浏览，可以采用实际库存和浏览库存分离的方式。<br>mysql 中 myisam 是表锁策略，innodb 是行锁策略，innodb 更适合高并发写入的场景</p></blockquote><p>一个线程获得行锁以后，其他并发线程就需要等待它处理完成，这样系统将无法利用多线程并发执行的优势，并且随着并发数的增加，等待的线程会越来越多，rt 急剧飙升，最终导致可用连接数被占满，数据库拒绝服务。</p><p>可以通过将一行库存拆分成多行，便可以解除行锁导致的并发资源利用的问题。<br>路由策略：id取模，随机。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="如何寻找性能的瓶颈"><a href="#如何寻找性能的瓶颈" class="headerlink" title="如何寻找性能的瓶颈"></a>如何寻找性能的瓶颈</h3><blockquote><p>Web 性能优化涉及前端优化、服务端优化、操作系统优化、数据库查询优化、JVM调优等众多领域的知识<br><em>寻找可优化的点是第一步也是最重要的一步，也就是所谓的性能瓶颈，性能瓶颈实际上就是木桶原理中最短的那一块木板</em></p></blockquote><h4 id="前端优化工具-YSlow"><a href="#前端优化工具-YSlow" class="headerlink" title="前端优化工具 YSlow"></a>前端优化工具 YSlow</h4><h4 id="页面响应时间"><a href="#页面响应时间" class="headerlink" title="页面响应时间"></a>页面响应时间</h4><h4 id="方法响应时间"><a href="#方法响应时间" class="headerlink" title="方法响应时间"></a>方法响应时间</h4><p><strong>Java 环境下有一个十分有效的动态跟踪工具，btrace</strong></p><h4 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h4><blockquote><p>GC 日志能够反应出 Java 应用执行内存回收详细情况，如 Minor GC 的频繁程度、Full GC 的频繁程度、GC 所导致应用停止响应的时间、引起 GC 的原因等。<br>在 JVM 启动时加上几个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-verbose:gc -Xloggc:/gc.log -XX:+PrintGCDetails -XX:+PrintGCDataStamps</span><br></pre></td></tr></table></figure></p></blockquote><p>分别表示日志存放位置，输出 GC 详情，输出 GC 时间戳</p><blockquote><p>CMS 收集器是一款以获取最短回收停顿时间为目的的收集器，它是基于标记清除算法实现的，整个过程大致分为四个步骤： CMS initial mark, CMS concurrent mark, CMS remark, CMS concurrent sweep</p></blockquote><h4 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h4><p>low_slow_query<br>low_query_time<br>通过 MySQL 的配置文件 my.cnf ，可以修改慢查询日志的相关配置</p><h4 id="系统资源使用"><a href="#系统资源使用" class="headerlink" title="系统资源使用"></a>系统资源使用</h4><h3 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h3><p>性能测试指的是通过一些自动化的测试工具模拟多种正常、峰值，以及异常负载对系统的各项性能指标进行测试。</p><h4 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h4><p>全称为 ApacheBench，专门针对 HTTP 服务器进行性能测试的小工具，可以模拟多个并发请求来对服务器进行压力测试，得出服务器在高负载下能够支持的qps及应用的响应时间，为系统设计者提供参考依据。</p><h4 id="Apache-JMeter"><a href="#Apache-JMeter" class="headerlink" title="Apache JMeter"></a>Apache JMeter</h4><p>开源性能测试工具，比 ab 更为强大，采用纯 Java 实现，支持多种协议的性能基准测试，如HTTP,SOAP,FTP,TCP,SMTP,POP3等。<br>提供了图形化界面</p><p>Tomcat 在启动脚本中加入如下配置，便能通过jconsole,VisualVM等工具查看系统相关信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATALINA\_OPTS=&quot;$CATALINA_OPTS -Djava.rmi.server.hostname=***.***.***.*** -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=**** -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;</span><br></pre></td></tr></table></figure></p><h4 id="HP-LoadRunner"><a href="#HP-LoadRunner" class="headerlink" title="HP LoadRunner"></a>HP LoadRunner</h4><p>商业付费，更成熟，更强大，支持的协议更为广泛，用户体验更高。</p><h4 id="反向代理引流"><a href="#反向代理引流" class="headerlink" title="反向代理引流"></a>反向代理引流</h4><blockquote><p>在分布式环境下，流量真正到达服务器之前，一般会经过负载均衡设备进行转发，通过修改负载均衡的策略，可以改变后端服务器所承受的压力。</p></blockquote><p>Nginx 配置权重，新版本灰度发布。</p><h4 id="TCPCopy"><a href="#TCPCopy" class="headerlink" title="TCPCopy"></a>TCPCopy</h4><p>网易技术部2011年9月开源的一个项目，请求复制工具，能够将在线请求复制到测试机器，模拟真实环境，达到程序在不上线的情况下承担线上真实流量的效果。</p><h3 id="性能优化措施"><a href="#性能优化措施" class="headerlink" title="性能优化措施"></a>性能优化措施</h3><h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><ol><li>页面的 HTTP 请求数量<blockquote><p>新建一个到服务器的HTTP连接需要重新经历TCP协议握手建立连接状态等过程，并且大部分请求和响应都包含了很多相同 header 与 cookie 内容，增加了网络带宽消耗。因此，减少 HTTP 请求的数量能够加速页面的加载，在不改变页面外观的情况下，可以通过采取合并样式和脚本文件等措施，来减少页面加载所需要请求数。</p></blockquote></li><li>是否使用 CDN 网络<blockquote><p>CDN 网络使得用户能够就近取得所需要的资源，降低静态资源传输的网络延迟。可以将图片、样式文件、脚本文件、页面框架等不需要频繁变动的内容推送到 CDN网络，可以提高页面加载的速度。</p></blockquote></li><li>是否使用压缩<blockquote><p>对于前端样式文件与脚本文件，可以将其中空格、注释等不必要的字符去掉，并且通过使用 gzip 压缩来减少网络上传输的字节数。当然，压缩也是有成本的，它会消耗一定的 CPU 资源，但通常情况下来说这种开销都是值得的。</p></blockquote></li></ol><h4 id="Java-程序优化"><a href="#Java-程序优化" class="headerlink" title="Java 程序优化"></a>Java 程序优化</h4><h5 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h5><p>对于 IO 处理、数据库连接、配置文件解析加载等一些非常耗费系统资源的操作，我们必须对这些实例的创建进行限制，或者始终使用一个公用的实例，以节约系统开销，这种情况下就需要用到单例模式。</p><h5 id="Future-模式"><a href="#Future-模式" class="headerlink" title="Future 模式"></a>Future 模式</h5><p>假设一个任务执行起来需要花费一些时间，为了省去不必要的等待时间，可以先获取一个提货单，即 Future ，然后继续处理别的任务，直到货物到达，即任务执行完得到结果，此时便可以用提货单进行提货，即通过 Future 对象得到返回值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TestFuture &#123;</span><br><span class="line">static class Job&lt;Object&gt; implements Callable&lt;Object&gt; &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object call() throws Exception &#123;</span><br><span class="line">return loadData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">FutureTask future = new FutureTask(new Job&lt;Object&gt;());</span><br><span class="line">new Thread(future).start();</span><br><span class="line"></span><br><span class="line">// do something else</span><br><span class="line"></span><br><span class="line">Object result = (Object) future.get();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>FutureTask 类实现了 Future 和 Runnable 接口，FutureTask 开始后，loadData()执行时间可能较长，因此可以先处理其他事情，等其他事情处理好以后，再通过 future.get() 来获取结果，如果 loadData() 还未执行完毕，则此线程会阻塞等待。</p></blockquote><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>使用线程池将互不依赖的几个动作切分，通过多线程对串行工作进行改进，将成倍地提高工作效率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class TestExecutorService &#123;</span><br><span class="line">static class Job implements Runnable &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">doWork();// 具体工作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void doWork() &#123;</span><br><span class="line">System.out.println(&quot;doing...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ExecutorService exec = Executors.newFixedThreadPool(5);</span><br><span class="line">for (int i = 0; i &lt; 10; i ++) &#123;</span><br><span class="line">exec.execute(new Job());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="选择就绪"><a href="#选择就绪" class="headerlink" title="选择就绪"></a>选择就绪</h5><blockquote><p>JDK自1.4起开始提供全新的 IO 编程类库，简称 NIO，其不但引入了全新高效的 Buffer 和 Channel ，同时还引入了基于 Selector 的非阻塞 IO 机制，将多个异步的 IO 操作集中到一个或几个线程当中进行处理。使用 NIO 代替阻塞 IO 能提高程序的并发吞吐能力，降低系统的开销。</p></blockquote><p><em>对于每一个请求，单独开一个线程进行响应的逻辑处理，如果客户端的数据传递并不是一直进行，而是断断续续的，则相应线程需要 IO 等待，并进行上下文切换。</em></p><p>Selector 机制使得线程不必等待客户端的 IO 就绪，当客户端还没就绪时，可以处理其他请求，提高了服务器的并发吞吐能力，降低了资源消耗。</p><h5 id="减少上下文切换"><a href="#减少上下文切换" class="headerlink" title="减少上下文切换"></a>减少上下文切换</h5><p>进程上下文切换会有一定的调度开销，这个过程中操作系统和JVM会消耗一定的CPU周期，并且由于CPU处理器会缓存一部分数据，当新线程被切换进来时，它所需要的数据可能不在CPU缓存中，因此还会导致CPU缓存的命中率下降。</p><h5 id="降低锁竞争"><a href="#降低锁竞争" class="headerlink" title="降低锁竞争"></a>降低锁竞争</h5><p>降低锁竞争的一种有效的方式是尽可能地缩短锁持有的时间，比如可以将一部分与锁无关的代码移出同步代码块，特别是执行起来开销较大的操作，以及可能使当前线程被阻塞的操作。<br>另一种减小锁持有时间的方式是减小锁的粒度，将原先使用单独锁来保护的多个变量变为采用多个相互独立的锁分别进行保护，这样就能够降低线程请求锁的几率，从而减少竞争发生的可能性。<strong>当然，使用的锁越多，发生死锁的风险也就越高。</strong><br>第三种降低锁竞争的方式就是放弃使用独占锁，而使用其他更友好的并发方式来保障数据的同步，原子变量就是使用读写锁。<br><em>对于多读少写的情况，使用读写锁能够比使用独占锁提供更高的并发数量。</em></p><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>在进行数据传输之前，可以先将数据进行压缩，以减少网络传输的字节数，提升数据传输的速度。接收端可以将数据进行解压，以还原出传递的数据，并且经过压缩的数据还可以节约所耗费的存储介质(磁盘或内存)的空间与网络带宽，降低成本。<br>当然，压缩需要大量的CPU计算，并且根据压缩算法的不同，计算的复杂度和数据的压缩比也存在较大差异。</p><h4 id="结果缓存"><a href="#结果缓存" class="headerlink" title="结果缓存"></a>结果缓存</h4><p>本地缓存，分布式缓存</p><h4 id="数据库查询性能优化"><a href="#数据库查询性能优化" class="headerlink" title="数据库查询性能优化"></a>数据库查询性能优化</h4><p>以mysql为例</p><h5 id="合理使用索引"><a href="#合理使用索引" class="headerlink" title="合理使用索引"></a>合理使用索引</h5><blockquote><p>对于使用B树或B+树存储的组合索引来说，有一个最基本的原则，即“最左前缀”的原则，如果查询不是按照索引的最左列来开始查询，则无法使用到组合索引。</p></blockquote><h5 id="反范式设计"><a href="#反范式设计" class="headerlink" title="反范式设计"></a>反范式设计</h5><p>范式设计好处:</p><ul><li>冗余数据的减少，无疑节约了存储空间，而且保证了关系的一致性;</li><li>由于冗余数据的减少，当数据需要进行更新时，要修改的数据则变少了，这样会提升更新操作的速度;</li><li>范式化的表通常更小，可以更好地利用表的查询缓存来提高查询速度。<br><em>但是，对于大多数复杂的业务场景来说，数据表现的纬度不可能是单表的。因此在进行查询操作时，需要进行表的关联。这不仅代价高昂，由于查询条件指定的列可能并不在同一个表中，因此也无法使用到索引，这将导致数据库的性能严重下降。</em><blockquote><p>为了尽可能地避免关联查询带来的性能损耗，有人提出了反范式设计，即将一些常用的需要关联查询的列进行冗余存储，以便减少表关联带来的随机IO和全盘扫描。</p></blockquote></li></ul><h5 id="使用查询缓存"><a href="#使用查询缓存" class="headerlink" title="使用查询缓存"></a>使用查询缓存</h5><ul><li>query_cache_type</li><li>query_cache_size</li><li>query_cache_limit</li></ul><h5 id="使用搜索引擎"><a href="#使用搜索引擎" class="headerlink" title="使用搜索引擎"></a>使用搜索引擎</h5><blockquote><p>在分布式环境下，为了便于数据库扩展，提高并发处理能力，相关联的表可能并不在同一个数据库当中，而是分布在多个库当中，并且表也可能已经进行了切分，无法进行复杂的条件查询。这时候就需要搭建搜索引擎，将需要进行查询和展现的列通过一定的规则都建到索引当中，以提供复杂的垮表查询与分组操作。</p></blockquote><h5 id="使用-key-value-数据库"><a href="#使用-key-value-数据库" class="headerlink" title="使用 key-value 数据库"></a>使用 key-value 数据库</h5><blockquote><p>对于保有海量数据的互联网企业来说，多表的关联查询是非常忌讳的。出于性能的考虑，更多时候往往根据表的主键来进行查询，或者进行简单的条件查询。因此，SQL的功能被很大程度地弱化了。</p></blockquote><h5 id="GC-优化"><a href="#GC-优化" class="headerlink" title="GC 优化"></a>GC 优化</h5><p>Parallel Scavenge 垃圾收集器是悲观策略，每次晋升到 OldGen 的平均大小如果大于当前OldGen的剩余空间，则触发一次FullGC。如果频繁发生，可以通过-Xmx与-Xms参数来调整整个堆的大小，以增加OldGen的大小，YoungGen对应的-Xmn保持不变。<br>默认情况下，CMS收集器的垃圾回收会在OldGen使用了68%空间时被激活，可以调大。但如果预留的内存无法满足程序需要，则会出现 concurrent mode failure。</p><p><em>堆设置：</em></p><ul><li>Xms 是指程序启动时初始内存大小（此值可以设置成与-Xmx相同，以避免每次GC完成后 JVM 内存重新分配）。</li><li>Xmx 指程序运行时最大可用内存大小，程序运行中内存大于这个值会 OutOfMemory。</li><li>Xmn 年轻代大小（整个JVM内存大小 = 年轻代 + 年老代 + 永久代）。</li><li>XX:NewRatio 年轻代与年老代的大小比例，-XX:NewRatio=4 设置为4，则年轻代与年老代所占比值为1：4。</li><li>XX:SurvivorRatio 年轻代中Eden区与Survivor区的大小比值，-XX:SurvivorRatio=4，设置为4，则两个Survivor区与一个Eden区的比值为 2:4</li><li>XX:MaxPermSize 设置永久代大小。</li><li>XX:MaxTenuringThreshold 设置垃圾最大年龄。<br>如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</li><li>Xss 设置每个线程的堆栈大小。</li></ul><h5 id="硬件提升性能"><a href="#硬件提升性能" class="headerlink" title="硬件提升性能"></a>硬件提升性能</h5><p>内存越大越好，硬盘读写，避免网卡成为系统吞吐的瓶颈，CPU核数。</p><h2 id="Java-应用故障排查"><a href="#Java-应用故障排查" class="headerlink" title="Java 应用故障排查"></a>Java 应用故障排查</h2><h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><ul><li>jps  类似 linux 的 ps</li><li>jstat  对虚拟机各种运营状态进行监控的工具，通过它可以查看虚拟机的类加载与卸载情况，管理内存使用和垃圾收集等信息，监视JIT即时编译器的运行情况等。</li><li>jinfo  用于查看应用程序的配置参数，以及打印运行JVM时所指定的JVM参数。</li><li>jstack  用来生成虚拟机当前的线程快照信息，线程快照就是当前虚拟机每一个线程正在执行的方法堆栈的集合。</li><li>jmap  查看等待回收对象的队列，查看堆的概要信息，包括采用的是哪种GC收集器，堆空间的使用情况，以及通过JVM参数指定的各个内存空间的大小。</li><li>BTrace  是一个开源的 Java 程序动态跟踪工具。基本原理是通过Hotspot虚拟机的HotSwap技术将跟踪的代码动态替换到被跟踪的Java程序内，以观察程序运行的细节。通过BTrace脚本，可以在方法执行时，输出传递给方法的参数与方法的返回值。</li><li>JConsole  是一款JDK内置的图形化性能分析工具，它可以用来连接本地或者远程正在运行的JVM，对运行的Java应用程序的性能及资源消耗情况进行分析和监控，并提供可视化的图表对相关数据进行展现。</li><li>Memory Analyzer      Eclipse 插件</li><li>VisualVM  功能强大的 all-in-one 工具</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="调优" scheme="http://yeonsea.club/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>Writing &amp; Publishing your First NPM Package</title>
    <link href="http://yeonsea.club/2019/08/23/Writing&amp;Publishing_your_First_NPM_Package/"/>
    <id>http://yeonsea.club/2019/08/23/Writing&amp;Publishing_your_First_NPM_Package/</id>
    <published>2019-08-23T05:54:11.000Z</published>
    <updated>2019-08-24T12:16:00.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Just-do-it"><a href="#Just-do-it" class="headerlink" title="Just do it"></a>Just do it</h1><h2 id="NPM-account"><a href="#NPM-account" class="headerlink" title="NPM account"></a>NPM account</h2><ol><li><p>Create an NPM account if you don’t yet have one<br><a href="https://www.npmjs.com/" title="npm js" target="_blank" rel="noopener">npm js</a>. </p></li><li><p>Open terminal and …</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure></li></ol><p>** If you use taobao mirror, it will show 403 Forbidden. Then …<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry # show the current login source</span><br><span class="line">npm config set registry=http://registry.npmjs.org # change to the npmjs</span><br><span class="line">npm login # relogin</span><br></pre></td></tr></table></figure></p><h2 id="Create-a-component"><a href="#Create-a-component" class="headerlink" title="Create a component"></a>Create a component</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports.*** = ***</span><br></pre></td></tr></table></figure><h2 id="Create-a-new-repository-on-GitHub"><a href="#Create-a-new-repository-on-GitHub" class="headerlink" title="Create a new repository on GitHub"></a>Create a new repository on GitHub</h2><h2 id="Init-and-publish"><a href="#Init-and-publish" class="headerlink" title="Init and publish"></a>Init and publish</h2><p>Under the component, open the terminal</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/***/***.git</span><br><span class="line">git push -u origin master</span><br><span class="line">sudo git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h2 id="Use-it"><a href="#Use-it" class="headerlink" title="Use it!"></a>Use it!</h2><p>create a new project<br>import<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i ** --save</span><br><span class="line">parser index.html</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Front-end" scheme="http://yeonsea.club/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>西尔维斯特-矩阵</title>
    <link href="http://yeonsea.club/2019/08/19/%E8%A5%BF%E5%B0%94%E7%BB%B4%E6%96%AF%E7%89%B9-%E7%9F%A9%E9%98%B5/"/>
    <id>http://yeonsea.club/2019/08/19/西尔维斯特-矩阵/</id>
    <published>2019-08-19T09:56:10.000Z</published>
    <updated>2019-08-20T09:38:57.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>西尔维斯特（James Joseph Sylvester, 1814~1897）</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>数量可以用二维数据表格来展示  </p><p>打猎得到的各种猎物和税金之间的关系可以用两个二维数据表格来表示  </p><table><thead><tr><th>00</th><th>兔子</th><th>鹿</th><th>野猪</th></tr></thead><tbody><tr><td>西尔维斯特</td><td>5只</td><td>1只</td><td>0只</td></tr><tr><td>东健</td><td>2只</td><td>0只</td><td>1只</td></tr><tr><td>小彬</td><td>0只</td><td>0只</td><td>2只</td></tr></tbody></table><table><thead><tr><th>猎物</th><th>税金</th></tr></thead><tbody><tr><td>兔子</td><td>20韩元</td></tr><tr><td>鹿</td><td>50韩元</td></tr><tr><td>野猪</td><td>100韩元</td></tr></tbody></table><p>运动器械和自行车的价格与需要购买的数量之间的关系可以用两个二维数据表格来表示  </p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>把数字或字母在括号内排列成二维数据表格就叫作矩阵。矩阵的各个数字或字母叫作元素。横向叫作行，纵向叫作列。  </p><p>矩阵的行数为m，列数为n时，矩阵的大小为m*n，行数和列数数目相等的矩阵叫作方块矩阵。  </p><p>元素都为0的矩阵叫作零矩阵；主对角线元素都为1，其余元素都是0的矩阵叫作单位矩阵。  </p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>把方程组变成矩阵来解，可以进行一下运算：  </p><ol><li>某一行可以乘以一个常数：相当于一个方程的两边同时乘以一个常数。</li><li>某一行乘以一个常数后可以与另一行相加：相当于一个方程的两边同时乘以一个常数后再与另一个方程相加。</li><li>行与行可以对调：方程的顺序对调后，解不变。</li></ol><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>方程组<br>$$<br>\begin{cases}<br>   ax+by=p \\<br>   cx+dy=q<br>\end{cases}<br>$$<br>用矩阵表达式如下<br>$$<br>\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}<br>\begin{pmatrix}<br>   x \\<br>   y<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>   p \\<br>   q<br>\end{pmatrix}<br>$$<br>可以简单表示为<br>$$<br>\begin{pmatrix}<br>   a &amp; b &amp;: &amp;p  \\<br>   c &amp; d &amp;: &amp;q<br>\end{pmatrix}<br>$$</p><hr><p>矩阵的某一行乘以一个常数后形成的新矩阵，求出的解是同一个方程组的解。  </p><p>矩阵的某一行乘以一个常数后与另一行相加形成的新矩阵，求出的解是同一个方程组的解。  </p><p>方程组构成的矩阵，行与行可以对调，对调后方程组的解不变。  </p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>可以将下面的三元一次方程组变成矩阵来解<br>$$<br>\begin{cases}<br>   a_{11}x+a_{12}y+a_{13}z=p \\<br>   a_{21}x+a_{22}y+a_{23}z=q \\<br>   a_{31}x+a_{32}y+a_{33}z=r<br>\end{cases}<br>$$</p><p>$$<br>\begin{pmatrix}<br>   a_{11} &amp; a_{12} &amp; a_{13} &amp;: &amp;p  \\<br>   a_{21} &amp; a_{22} &amp; a_{23} &amp;: &amp;q  \\<br>   a_{31} &amp; a_{32} &amp; a_{33} &amp;: &amp;r<br>\end{pmatrix}<br>$$</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>两个矩阵相等是指两个矩阵中所有的元素对应相等。  </p><p>两个矩阵之间对应的元素相加，可以实现两个矩阵之间的加法运算。</p><p>一个矩阵的各元素可以乘以某个常数。  </p><p>两个矩阵之间对应的元素相减，可以实现两个矩阵之间的减法运算。</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p>两个矩阵相乘，前面矩阵的列数要与后面矩阵的行数相等。这时乘积的大小由前面矩阵的行数和后面矩阵的列数决定。即<br>$$<br>A_{m×n}B_{n×t}=C_{m×t}<br>$$</p><hr><p>前面矩阵的第i行和后面矩阵的第j列的各对应元素的乘积之和，构成乘积矩阵中的(i, j)元素。  </p><p>寻找日常生活中可以用矩阵乘积表示的问题。</p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>可求出方块矩阵<br>$$<br>\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}<br>$$<br>的逆矩阵  </p><p>$$<br>{\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}}^{-1}<br>= {1 \over ad - bc}<br>\begin{pmatrix}<br>   d &amp; -b \\<br>   -c &amp; a<br>\end{pmatrix}<br>(ad-bc \ne 0)<br>$$</p><hr><p>利用逆矩阵求二元一次方程组<br>$$<br>\begin{cases}<br>   ax+by=p \\<br>   cx+dy=q<br>\end{cases}<br>$$<br>的解。首先像下面这样用矩阵表示方程：<br>$$<br>\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}<br>\begin{pmatrix}<br>   x \\<br>   y<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>   p \\<br>   q<br>\end{pmatrix}<br>$$<br>然后式子两边靠左的位置写上<br>$$<br>\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}<br>$$<br>的逆矩阵，再做乘法运算。<br>$$<br>\begin{pmatrix}<br>   x \\<br>   y<br>\end{pmatrix}<br>=<br>{\begin{pmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\end{pmatrix}}^{-1}<br>\begin{pmatrix}<br>   p \\<br>   q<br>\end{pmatrix}<br>$$<br>--</p><p>$$<br>\begin{pmatrix}<br>   x \\<br>   y<br>\end{pmatrix}<br>=<br>{1 \over ad - bc}<br>\begin{pmatrix}<br>   d &amp; -b \\<br>   -c &amp; a<br>\end{pmatrix}<br>\begin{pmatrix}<br>   p \\<br>   q<br>\end{pmatrix}<br>=<br>{1 \over ad - bc}<br>\begin{pmatrix}<br>   dp-bq \\<br>   -cp+aq<br>\end{pmatrix}<br>(ad-bc \ne 0)<br>$$<br>--</p><p>$$<br>x={dp-bq \over ad-bc}, y={-cp+aq \over ad-bc}<br>$$</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>研究是否可以用矩阵表示身边的实际问题。思考如何确定一个矩阵的各个元素。  </p><p>利用矩阵解决问题，预测未来</p><p><strong>各列元素的和等于1的矩阵用俄国数学家马尔可夫的名字命名为马尔可夫转移矩阵。</strong><br>这个矩阵经常用来表示某种变化的概率，某个地区的人口变化、市场经济的版图变化等，我们周围的各种变化都可以用这样的矩阵表示，帮助我们有效地解决问题。  </p><p>老鼠房间概率<br>城市邻接矩阵  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Math" scheme="http://yeonsea.club/categories/Math/"/>
    
    
      <category term="Basic" scheme="http://yeonsea.club/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://yeonsea.club/2019/03/12/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yeonsea.club/2019/03/12/布隆过滤器/</id>
    <published>2019-03-12T01:17:12.000Z</published>
    <updated>2019-08-20T10:11:51.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><h2 id="什么是布隆过滤器"><a href="#什么是布隆过滤器" class="headerlink" title="什么是布隆过滤器"></a>什么是布隆过滤器</h2><p>布隆过滤器是一种基于概率进行验重的数据结构。它的基本原理是：小概率事件不容易同时发生。</p><p>布隆过滤器使用多个哈希函数把同一个字符串转换成多个不同的哈希值，并记录这些哈希值的特征。下次再面对一个字符串时，布隆过滤器再次使用这些哈希函数把这个字符串转换为多个哈希值。如果这个哈希值全部符合原先那个字符串对应的各个哈希值的特征，则认为这两个字符串是相同的。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希算法不是一种加密算法，而是一种不可逆的摘要算法。<br>不同的哈希函数可实现不同的哈希算法。<br>使用同一个哈希算法，能够把同一个字符串转成同一个哈希值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">code = <span class="string">'hello'</span></span><br><span class="line">result = hashlib.sha256(code.encode()).hexdigest()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>结果是一个十六进制的_数_</p><h2 id="布隆过滤器的原理"><a href="#布隆过滤器的原理" class="headerlink" title="布隆过滤器的原理"></a>布隆过滤器的原理</h2><ol><li>假设K个哈希函数，对同一个字符串计算哈希值，得到K个完全不同的哈希值。</li><li>让这K个哈希值同时除以一个数M，就可以得到K个余数。</li><li>对于一个新的字符串，重复这个过程，如果新字符串获得的K个余数与原来的字符串对应的K个余数完全相同，那么就可以说，这两个字符串”很有可能”是同一个字符串。</li></ol><p>$$<br>1-(1-e^{\frac{-KN}{M}})^{K}<br>$$</p><h2 id="如何压缩数据容量"><a href="#如何压缩数据容量" class="headerlink" title="如何压缩数据容量"></a>如何压缩数据容量</h2><p>采用二进制保存数字</p><h2 id="布隆过滤器与Redis结合"><a href="#布隆过滤器与Redis结合" class="headerlink" title="布隆过滤器与Redis结合"></a>布隆过滤器与Redis结合</h2><p>使用Redis字符串的位操作，记录K个余数的位置即可。</p><h2 id="布隆过滤器的弊端"><a href="#布隆过滤器的弊端" class="headerlink" title="布隆过滤器的弊端"></a>布隆过滤器的弊端</h2><p>布隆过滤器只能单向验证重复。<br>随着Redis字符串对应的二进制位越来越多的为被设置为1，布隆过滤器误报的概率越来越大，因为可能其它多个字符串对应的二进制位中越来越多的位被设置为1，其中K个值刚好和一个新来的字符串的K个余数重合。<br>提前规划好数据规模与容忍的误报率。  </p><blockquote><p>最多需要对 n 个字符串进行验证重复操作，能够容忍的最大误报率为 p，那么，布隆过滤器将会使用到的二进制位的数量为：</p></blockquote><p>$$<br>m = -\frac{n\ln{p}}{\ln{2}^{2}}<br>$$</p><blockquote><p>哈希函数的个数为：</p></blockquote><p>$$<br>k = \frac{m}{n}\ln{2}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Web" scheme="http://yeonsea.club/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yeonsea.club/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>用 Spring Boot 编写 RESTful API</title>
    <link href="http://yeonsea.club/2018/12/23/%E7%94%A8SpringBoot%E7%BC%96%E5%86%99RESTfulAPI/"/>
    <id>http://yeonsea.club/2018/12/23/用SpringBoot编写RESTfulAPI/</id>
    <published>2018-12-23T12:17:58.000Z</published>
    <updated>2018-12-23T12:31:19.484Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/12/23/用SpringBoot编写RESTfulAPI/../用SpringBoot编写RESTfulAPI/spring-boot-project-logo.png"></p><h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><p><a href="https://study.163.com/course/courseMain.htm?courseId=1005213034" target="_blank" rel="noopener">课程</a></p><h2 id="开始一个最简单的RESTFul-API项目"><a href="#开始一个最简单的RESTFul-API项目" class="headerlink" title="开始一个最简单的RESTFul API项目"></a>开始一个最简单的RESTFul API项目</h2><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>Representational State Transfer</p><p>所有的东西都是资源，所有的操作都是通过对资源的增删改查（CRUD）实现</p><p>对资源的增删改查对应对URL的操作（POST,DELETE,PUT,GET）</p><p>无状态的</p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p>大量使用注解，减少配置，无需配置XML<br>自带嵌入式web服务器</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>pom.xml文件是Maven项目的配置文件<br>几个常用的Maven命令（在pom.xml同级目录下运行）<br>mvn test 编译并运行测试用例<br>mvn spring-boot:run 运行spring-boot项目<br>mvn package 打包项目<br>mvn clean 可以和其它命令一起使用，例如mvn clean package</p><h3 id="日期型转JSON格式"><a href="#日期型转JSON格式" class="headerlink" title="日期型转JSON格式"></a>日期型转JSON格式</h3><p>可以在属性上增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@JsonFormat(timezone=&quot;GMT+8&quot;, pattern=&quot;yyyy-MM-dd&quot;)</span><br></pre></td></tr></table></figure></p><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@JsonFormat（shape=JsonFormat.Shape.NUMBER）</span><br></pre></td></tr></table></figure><p>全局修改可以在application.yml  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  jackson:  </span><br><span class="line">    date-format: yyyy-MM-dd #如果使用字符串表示，用这行设置格式  </span><br><span class="line">    timezone: GMT+8  </span><br><span class="line">    serialization:   </span><br><span class="line">      write-dates-as-timestamps: true #使用数值timestamp表示日期</span><br></pre></td></tr></table></figure><h2 id="RestController详解"><a href="#RestController详解" class="headerlink" title="RestController详解"></a>RestController详解</h2><h3 id="热部署（Hot-Swapping）"><a href="#热部署（Hot-Swapping）" class="headerlink" title="热部署（Hot Swapping）"></a>热部署（Hot Swapping）</h3><p>pom中加入devtools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><p>Commons-logging or SLF4j</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final Log log = LogFactory.getLog(Xxx.class);</span><br><span class="line">private static final Logger log = LoggerFactory.getLogger(Xxx.class);</span><br></pre></td></tr></table></figure><p>日志级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL<br>application.yml配置日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  file: target/app.log</span><br><span class="line">  level: </span><br><span class="line">    ROOT: WARN</span><br><span class="line">    cn.devmgr: TRACE</span><br></pre></td></tr></table></figure></p><h3 id="命令行工具CURL"><a href="#命令行工具CURL" class="headerlink" title="命令行工具CURL"></a>命令行工具CURL</h3><p>测试工具<br><a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman</a></p><h3 id="在RestController中获取各种相关信息的方法"><a href="#在RestController中获取各种相关信息的方法" class="headerlink" title="在RestController中获取各种相关信息的方法"></a>在RestController中获取各种相关信息的方法</h3><table><thead><tr><th>内容</th><th>获取方法</th></tr></thead><tbody><tr><td>URL中路径的一部分</td><td>首先需要在RequestMapping做映射，之后在方法中可以通过注解使用映射的变量。可以写多个，@PutMapping(“/{id}/characters/{cId}”)，还可以使用正则表达式限制类型（不符合要求会返回4xx的错误信息，表示请求参数有问题）此例子表示id必须是数字：@PutMapping(“/{id:\\d+}”)</td></tr><tr><td>POST方法传递过来的JSON</td><td>给参数前增加@RequestBody注解，Spring会自动把POST的Request Body部分的JSON转换成方法声明的类。如果转化失败会返回4xx错误，表示请求参数有问题。</td></tr><tr><td>POST方法传递的是表单数据</td><td>首先声明传入的是application/x-wwww-form-urlencoded的格式，可在RequestMapping增加consumes参数，@PostMapping(value=”/tvseries”, consumes=MediaType.APPLICATION_FORM_URLENCODED_VALUE)，在方法上增加参数，参数使用@RequestParam注解即可，public Object insert(@RequestParam(value=”name”, required=false) String name)，凡是可以通过HttpServletRequest.getParameter(String)方法取到的值，含表单提交的、QueryString附带的，都可以使用@RequestParam注解得到。默认是request=true。</td></tr><tr><td>QueryString的参数</td><td>使用@RequestParam注解，通过参数获得,例如：public Object query(@RequestParam(value=”page”, required=false) Integer page)</td></tr><tr><td>Request Header</td><td>可以使用@Requestheader注解获取Request的头信息,例如public ResultJSON editCompany(@RequestHeader(“user-agent”) String userAgent) 注意：@RequestHeader后面的头名字不区分大小写，但RequestParam, PathVariable等是区分的。如果RequestHeader后面不写参数，会用后面的变量名替代。</td></tr><tr><td>获取cookie值</td><td>使用cookieValue注解，和其它类似，除非为了兼容老现有客户端，新API里不建议用cookie。</td></tr><tr><td>获取当前的Request Response</td><td>直接写参数，例如：public Object doSomething(HttpServletRequest request, HttpServletResponse response)</td></tr><tr><td>获取当前用户</td><td>直接在方法上增加参数，类型为org.springframework.security.core.Authentication, 例如：public TvSeries deleteOne(Authentication auth)，参数auth内会存储有当前的用户信息。</td></tr><tr><td>文件上传</td><td>首先要设置consumes为multipart/form-data，@PostMapping(value=”/files”, consumes=MediaType.MULTIPART_FORM_DATA_VALUE),在方法中写参数 public Map&lt;String, Object&gt; uploadFile(@RequestParam(“file”) MultipartFile file)。在方法中可以直接使用MultipartFile中的流保存文件了。</td></tr></tbody></table><h3 id="对客户端传入数据的校验"><a href="#对客户端传入数据的校验" class="headerlink" title="对客户端传入数据的校验"></a>对客户端传入数据的校验</h3><p>原则：不要相信前端传过来的数据；尽量要前端少传递数据</p><p>Bean Validation: JSR303, Hibernate Validator</p><p>Bean Validation 注解：<br>@Null<br>@NotNull<br>@Min<br>@Max<br>@Size<br>@Past  验证Date<br>@Future<br>@AssertTrue  验证Boolean<br>@AssertFalse<br>@Valid 级联验证注解</p><table><thead><tr><th>类型</th><th>注解</th></tr></thead><tbody><tr><td>任何类型</td><td>NULL, NotNull</td></tr><tr><td>布尔型</td><td>AssertTrue, AssertFalse</td></tr><tr><td>字符串</td><td>NotBlank, Pattern, Size, Email, DecimalMin, Digits</td></tr><tr><td>数值</td><td>DecimalMax, DecimalMin, Digits, Max, Min, NegativeOrZero, Positive, PositiveOrZero</td></tr><tr><td>集合、Map、List</td><td>NotEmpty, Size</td></tr><tr><td>日期</td><td>Future, Past, FutureOrPresent, PastOrPresent</td></tr></tbody></table><blockquote><p>以上注解都指Bean Validation 2.0 定义的注解，在javax.validation.constraints包下。Hibernate有些非JSR标准注解和上面的同名但package不同，功能会和上面这些有些细微差异。</p></blockquote><p>约束规则对子类依旧有效<br>groups参数  </p><ul><li>每个约束用注解都有一个groups参数</li><li>可接收多个class类型（必须是接口）</li><li>不声明groups参数是默认组javax.validation.groups.Default</li><li>声明了groups参数的会从Default组移除，如需加入Default组需要显示声明，例如@Null(groups={Default.class, Step1.class})</li></ul><p>@Valid vs @Validated</p><ul><li>@Valid是JSR标准定义的注解，只验证Default组的约束</li><li>@Validated是Spring定义的注解，可以通过参数来指定验证的组，例如：@Validation({Step1.class,Default.class})表示验证Step1和Default两个组的约束</li><li>@Valid可用在成员变量上，进行级联验证；@Validated只能用在参数上，表示这个参数需要验证<blockquote><p>参数中只用@Validated，通不过校验的参数，不会执行这个方法，加上BindingResult result ，参数通不过校验也会进入方法执行，校验结果会通过result参数传递进来。</p></blockquote></li></ul><p>手动验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 装载验证器</span><br><span class="line">@Autowired Validator validator;</span><br><span class="line">// 验证某个类，下面是执行默认的验证组，如果需要指定验证组，多传一个class参数</span><br><span class="line">Set&lt;ConstraintViolation&lt;?&gt;&gt; result = validator.validate(obj);</span><br><span class="line">// 通不过校验result的集合会有值，可以通过size()判断</span><br></pre></td></tr></table></figure><h2 id="在Spring-Boot项目中使用Mybatis"><a href="#在Spring-Boot项目中使用Mybatis" class="headerlink" title="在Spring Boot项目中使用Mybatis"></a>在Spring Boot项目中使用Mybatis</h2><h3 id="程序的层次结构"><a href="#程序的层次结构" class="headerlink" title="程序的层次结构"></a>程序的层次结构</h3><p>Web前端、App、小程序、其它系统等<br>Web控制层：@RestController @Controller<br>业务逻辑层：@Service<br>数据访问层：@Repository<br>@Component<br>数据库</p><p>PBF: Package by Feature 按功能划分<br>PBL: Package by Layer 按层次划分  </p><h3 id="相邻层次的数据传输"><a href="#相邻层次的数据传输" class="headerlink" title="相邻层次的数据传输"></a>相邻层次的数据传输</h3><ul><li>PO：Persistant Object 持久对象</li><li>DTO：Data Transfer Object 数据传输对象</li><li>VO：Value Object 或 View Object</li><li>POJO：Pure Old Java Object 或 Plain Ordinary Java Object</li><li>DO：Domain Object</li><li>BO：Business Object 处理业务逻辑</li><li>DAO：Data Access Object</li></ul><p>JavaBean:  </p><ul><li>有一个public的无参构造方法</li><li>属性private，且可以通过get、set、is（可以替代get，用在布尔型属性上）方法或遵循特定命名规范的其它方法访问</li><li>可序列化，实现Serializable接口</li></ul><p>POJO vs JavaBean:</p><ul><li>POJO比javabean更简单。POJO严格的遵守简单对象的概念，而一些JavaBean中往往会封装一些简单逻辑。</li><li>POJO主要用于数据的临时传递，它只能装载数据，作为数据存储的载体，不具有业务逻辑处理能力。</li><li>JavaBean虽然数据的获取与POJO一样，但是javabean当中可以有其他方法。</li></ul><p>几种简化方案：  </p><ul><li>一种POJO从web控制层到数据访问层</li><li>用JavaBean代替POJO</li><li>POJO的get,set写起来也麻烦，用public的field代替</li></ul><h3 id="添加Mybatis支持步骤"><a href="#添加Mybatis支持步骤" class="headerlink" title="添加Mybatis支持步骤"></a>添加Mybatis支持步骤</h3><ol><li>修改pom.xml，添加mybatis支持</li><li>修改application.yml添加数据库连接</li><li>修改启动类，增加@MappingScan(“package-of-mapping”)注解</li><li>添加Mybatis Mapping接口</li><li>添加Mapping对应的XML（可选）</li></ol><p>pom.xml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>application.yml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    dbcp2.validation-query: select 1</span><br><span class="line">    driverClassName: org.postgresql.Driver</span><br><span class="line">    url: jdbc:postgresql://127.0.0.1:5432/thedb?stringtype=unspecified</span><br><span class="line">    username: </span><br><span class="line">    password:</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-项目的单元测试"><a href="#Spring-Boot-项目的单元测试" class="headerlink" title="Spring Boot 项目的单元测试"></a>Spring Boot 项目的单元测试</h2><h3 id="Assert-JUnit的断言"><a href="#Assert-JUnit的断言" class="headerlink" title="Assert-JUnit的断言"></a>Assert-JUnit的断言</h3><ul><li>判断某条件是否为真 Assert.assertTrue(条件表达式)；</li><li>判断某条件是否为假 Assert.assertFalse(条件表达式)；</li><li>判断两个变量值是否相同 Assert.assertEquals(val1, val2);</li><li>判断两个变量值是否不相同 Assert.assertNotEquals(val1, val2);</li><li>判断两个数组是否相同 Assert.assertArrayEquals(数组1, 数组2)；</li><li>直接测试失败 Assert.fail()  Assert.fail(message)</li></ul><h3 id="Assert-vs-assert"><a href="#Assert-vs-assert" class="headerlink" title="Assert vs assert"></a>Assert vs assert</h3><ul><li>Assert是JUnit的断言类，全名是org.junit.Assert</li><li>Assert提供了很多静态方法，例如…</li><li>assert是java关键字，使用方法有两种，表达式为false时，jvm会退出；</li><li>assert关键字内表达式是否被检查成立依赖jvm的参数，默认是关闭的<blockquote><p>Java命令行参数：-ea (enableassertions)  -da (disableassertions 默认)</p></blockquote></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>驱动模块</li><li>被测模块</li><li>桩模块 使用场景：替代尚未开发完毕的子模块；替代对环境依赖较大的子模块（例如数据访问层）；</li></ul><h3 id="mockito"><a href="#mockito" class="headerlink" title="mockito"></a>mockito</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><ul><li>Test Driven Development (测试驱动开发)</li><li>先写测试用例，后写实现代码</li><li>重构现有代码时特别好用<blockquote><p>RDD: Resume Driven Development</p></blockquote></li></ul><h2 id="在-Spring-中管理数据库事务"><a href="#在-Spring-中管理数据库事务" class="headerlink" title="在 Spring 中管理数据库事务"></a>在 Spring 中管理数据库事务</h2><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><ul><li>name 当在配置文件中有多个TransactionManager,可以用该属性指定选择哪个事务管理器。</li><li>propagation 事务的传播行为，默认值为REQUIRED。</li><li>isolation 事务的隔离度，默认采用DEFAULT。</li><li>timeout 事务的超时时间，默认值为-1,。如果超过该时间限制但事务还没有完成，则自动回滚事务。</li><li>readOnly 指定事务是否为只读事务，默认值为false；为了忽略那些不需要事务的方法，比如读取数据，可以设置readOnly为true。</li><li>rollbackFor 指定能够触发事务回滚的异常类型。</li><li>noRollbackFor 指定的异常类型，不回滚事务<blockquote><p>1.noRollbackFor或子类；2.rollbackFor或子类；3.throws定义的异常或子类；4.其它异常；5.无异常</p></blockquote></li></ul><h3 id="Transactional-propagation-xx"><a href="#Transactional-propagation-xx" class="headerlink" title="@Transactional(propagation=xx)"></a>@Transactional(propagation=xx)</h3><ol><li>propagation.REQUIRED 如果有事务，那么加入事务，没有的话新建一个（默认）</li><li>propagation.NOT_SUPPORTED 容器不为这个方法开启事务</li><li>propagation.REQUIRED_NEW 不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕，继续执行老的事务</li><li>propagation.MANDATORY 必须在一个已有的事务中执行，否则抛出异常</li><li>propagation.NEVER 必须在一个没有的事务中执行，否则抛出异常（与propagation.MANDATORY相反）</li><li>propagation.SUPPORTS 如果其它bean调用这个方法，在其它bean中声明事务，那就用事务，如果其它bean没有声明事务那就不用事务</li><li>propagation.NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与propagation.REQUIRED类似的操作</li></ol><h3 id="Transactional-isolation-xx"><a href="#Transactional-isolation-xx" class="headerlink" title="@Transactional(isolation=xx)"></a>@Transactional(isolation=xx)</h3><ol><li>Isolation.READ_UNCOMMITTED 读未提交数据 （脏读、不可重复读、幻读）</li><li>Isolation.READ_COMMITTED 读已提交数据（不可重复读、幻读）</li><li>Isolation.REPEATABLE_READ 可重复读 （幻读）</li><li>Isolation.SERIALIZATION 串行化 </li><li>Isolation.DEFAULT 使用数据库默认</li></ol><h3 id="Isolation-vs-Lock"><a href="#Isolation-vs-Lock" class="headerlink" title="Isolation vs Lock"></a>Isolation vs Lock</h3><ul><li>两个不同的东西，隔离不是靠锁实现的，是靠对数据的监控实现的。</li><li>锁：表加好锁了，除非出现死锁等特殊情况，事务是不会被数据库主动回滚的。</li><li>隔离：如果发现数据不符合数据库隔离级别，当前事务会出错并回滚。相比锁被回滚可能性较大，需要程序有出错重试的步骤。</li></ul><h3 id="Transactional注解的timeout参数"><a href="#Transactional注解的timeout参数" class="headerlink" title="@Transactional注解的timeout参数"></a>@Transactional注解的timeout参数</h3><ul><li>timeout事务的超时时间，默认值为-1,。如果超过该时间限制但事务还没有完成，则自动回滚事务。</li><li>方法抛出异常，事务被回滚，可能是SQL执行时间过长的异常，也可能是TransactionTimedOutException</li><li>从方法执行开始计算，每个SQL执行前检查一次是否超时，方法全部执行完毕后不检查是否超时</li></ul><h2 id="Mybatis进阶"><a href="#Mybatis进阶" class="headerlink" title="Mybatis进阶"></a>Mybatis进阶</h2><h3 id="复杂类的ORMapping和主子表的同时数据插入"><a href="#复杂类的ORMapping和主子表的同时数据插入" class="headerlink" title="复杂类的ORMapping和主子表的同时数据插入"></a>复杂类的ORMapping和主子表的同时数据插入</h3><p>#{}可转义 ${} 不可转义（可能导致sql注入）  </p><h3 id="使用TypeHandler处理枚举、数组、JSON等特殊类型"><a href="#使用TypeHandler处理枚举、数组、JSON等特殊类型" class="headerlink" title="使用TypeHandler处理枚举、数组、JSON等特殊类型"></a>使用TypeHandler处理枚举、数组、JSON等特殊类型</h3><p>EnumTypeHandler vs EnumOrdinalTypeHandler</p><ul><li>EnumTypeHandler存储的是对应类的名字，可以存储成一个字符串</li><li>EnumOrdinalTypeHandler存储的是枚举类型的顺序</li></ul><p>ArrayTypeHandler<br>自定义JsonTypeHandler</p><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h3 id="安全控制的层级"><a href="#安全控制的层级" class="headerlink" title="安全控制的层级"></a>安全控制的层级</h3><ul><li>基于URL的控制</li><li>基于方法的控制</li><li>程序内</li></ul><h3 id="配置Spring-Security"><a href="#配置Spring-Security" class="headerlink" title="配置Spring Security"></a>配置Spring Security</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = false)</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    private final static Log log = LogFactory.getLog(WebSecurityConfig.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity httpSecurity) throws Exception &#123;</span><br><span class="line">        if (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(&quot;configure httpSecurity...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //默认的spring-security配置会让所有的请求都必须在已登录的状况下访问；下面这段代码禁止了这种操作。</span><br><span class="line">        httpSecurity.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                .authorizeRequests().anyRequest().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Security-注解"><a href="#Spring-Security-注解" class="headerlink" title="Spring Security 注解"></a>Spring Security 注解</h3><p>@EnableGlobalMethodSecurity(prePostEnable=true, securedEnable=true, jsr250Enabled=true)<br>prePostEnable=true: @PreAuthorize @PostAuthorize @PreFilter @PostFilter<br>securedEnable=true: @Secured<br>jsr250Enable: @RolesRequied (JSR250)  </p><h3 id="PreAuthorize-PostAuthorize-中常用的表达式"><a href="#PreAuthorize-PostAuthorize-中常用的表达式" class="headerlink" title="@PreAuthorize @PostAuthorize 中常用的表达式"></a>@PreAuthorize @PostAuthorize 中常用的表达式</h3><ul><li>hasRole(‘user’, ‘admin’)  hasAnyRole(‘user’, ‘admin’)</li><li>hasAuthority(‘query’, ‘update’)   hasAnyAuthority(‘query’, ‘update’)</li><li>permitAll denyAll</li><li>principal, authentication 当前用户</li></ul><h3 id="Role-vs-Authorization"><a href="#Role-vs-Authorization" class="headerlink" title="Role vs Authorization"></a>Role vs Authorization</h3><ul><li>ROLE_开头则是role</li><li>JSR250 RolesAllowed全部要求是role</li><li>Spring EL中hasRole也要求是role hasAuthority则不用ROLE_开头</li></ul><h3 id="Controller内获取当前用户"><a href="#Controller内获取当前用户" class="headerlink" title="Controller内获取当前用户"></a>Controller内获取当前用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Object doSomething(Authentication auth)&#123;</span><br><span class="line">    User u = (User) auth.getPrincipal();</span><br><span class="line">&#125;</span><br><span class="line">或  </span><br><span class="line">Authentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br></pre></td></tr></table></figure><h3 id="启用Spring-Security"><a href="#启用Spring-Security" class="headerlink" title="启用Spring Security"></a>启用Spring Security</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="OpenId"><a href="#OpenId" class="headerlink" title="OpenId"></a>OpenId</h3><ul><li>提供用户追踪方式</li><li>无需使用用户名密码登录</li><li>协议2.0版提供属性交换功能</li><li>目前已经很少使用</li></ul><h3 id="OAuth开放授权"><a href="#OAuth开放授权" class="headerlink" title="OAuth开放授权"></a>OAuth开放授权</h3><ul><li>目前是OAuth2.0</li><li>2.0不兼容1.0</li><li>密码无需告诉第三方</li><li>为用户提供一个令牌，允许通过令牌访问资源</li></ul><h3 id="OAuth-2-0-Grant-Types"><a href="#OAuth-2-0-Grant-Types" class="headerlink" title="OAuth 2.0 Grant Types"></a>OAuth 2.0 Grant Types</h3><ul><li>授权码模式 Authorization Code</li><li>简化模式 Implicit</li><li>密码模式 Password</li><li>客户端模式 Client Credentials</li><li>Refresh Token</li></ul><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><ul><li>JSON Web Token</li><li>三部分：Header、Playload、Verify Signature</li><li>Header：头部信息，声明类型和加密算法</li><li>Playload：载荷</li><li>Verify Signature：签名，用于验证头部和载荷部分是否被修改过</li></ul><h3 id="JWT的加密方式"><a href="#JWT的加密方式" class="headerlink" title="JWT的加密方式"></a>JWT的加密方式</h3><ul><li>HMAC  共用一个秘钥</li><li>SHA256    公钥私钥分开</li></ul><h3 id="生成JWT和验证JWT的jar"><a href="#生成JWT和验证JWT的jar" class="headerlink" title="生成JWT和验证JWT的jar"></a>生成JWT和验证JWT的jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>网站：<a href="https://github.com/auth0/java-jwt" target="_blank" rel="noopener">https://github.com/auth0/java-jwt</a>  </p><h2 id="Spring-Async-Scheduling-amp-Cache"><a href="#Spring-Async-Scheduling-amp-Cache" class="headerlink" title="Spring Async, Scheduling &amp; Cache"></a>Spring Async, Scheduling &amp; Cache</h2><h3 id="Spring-Async-异步执行"><a href="#Spring-Async-异步执行" class="headerlink" title="Spring Async 异步执行"></a>Spring Async 异步执行</h3><p>配置：@EnableAsync (@SpringBootApplication 那里)<br>使用：@Async （方法上）<br>@Async方法返回值：  </p><ul><li>void</li><li>Future<t></t></li><li>其他类型一律返回null；遇到int/double/float/boolean基本类型，执行时会抛出异常：AopInvocationException;</li></ul><h3 id="Spring-Scheduling"><a href="#Spring-Scheduling" class="headerlink" title="Spring Scheduling"></a>Spring Scheduling</h3><p>使用：</p><ul><li>@EnableScheduling 注解启用Scheduling</li><li>方法上加@Scheduled注解，方法会按照参数定期执行<br>@Scheduled 参数：</li><li>cron 值为字符串</li><li>zone 设置时区</li><li>fixedDelay (单位毫秒)，每次方法执行完毕后，休息固定时间后再次启动</li><li>fixedRate (单位毫秒)按照固定频率启动执行<br>-initialDelay (单位毫秒)，和上面三个参数搭配使用，首次执行延时 </li></ul><p>集群/负载均衡环境</p><ul><li>独立出来一个application运行scheduling task</li><li>使用：Quartz Scheduler</li></ul><h3 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h3><p>缓存：  </p><ul><li>利用java程序中的变量（简单；集群环境中多个实例无法同步）</li><li>缓存服务器（Memcached，Redis）<br>Spring中通过注解使用缓存  </li><li>@EnableCaching启用缓存注解</li><li>@Cacheable</li><li>@CacheEvict</li><li>@CachePut</li><li>@CacheConfig</li></ul><h3 id="使用-Redis-缓存服务"><a href="#使用-Redis-缓存服务" class="headerlink" title="使用 Redis 缓存服务"></a>使用 Redis 缓存服务</h3><p>POM中加入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependecy&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>application.yml 中加入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cache:</span><br><span class="line">    redis:</span><br><span class="line">      time-to-live: 3306</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    pool:</span><br><span class="line">      max-active: 5</span><br><span class="line">      max-idle: 10</span><br><span class="line">      max-wait: 10000</span><br></pre></td></tr></table></figure><h2 id="Websocket-amp-JMS"><a href="#Websocket-amp-JMS" class="headerlink" title="Websocket &amp; JMS"></a>Websocket &amp; JMS</h2><p>Websocket</p><ul><li>全双工通道，数据双向传输</li><li>浏览器和服务器之间的持久性的连接</li><li>比轮询/长轮询大幅节省资源</li><li>使用80/443等HTTP端口</li><li>ws://example.com/wsapi wss://secure.example.com/</li><li>IE10以上浏览器支持</li></ul><p>JMS  </p><ul><li>Java Message Service – Java消息服务</li><li>在两个应用程序或者分布式服务之间提供异步消息通讯</li><li>应用间解耦</li><li>企业应用集成中应用较多</li><li>消息服务器很多，Apache ActiveMQ是比较常见的一个</li></ul><p>JMS消息模式</p><ul><li>点对点（P2P）：每个消息有一个生产者一个消费者</li><li>发布者/订阅者（Pub/Sub）:每个消息一个生产者、多个消费者</li></ul><p>安装ActiveMQ<br>  配置pom文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>  配置application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  activemq:</span><br><span class="line">    broker-url: tcp://127.0.0.1:61616</span><br></pre></td></tr></table></figure><p>  @EnableJms 注解</p><h2 id="部署Spring-Boot项目"><a href="#部署Spring-Boot项目" class="headerlink" title="部署Spring Boot项目"></a>部署Spring Boot项目</h2><h3 id="Spring-Profile-和配置日志记录框架"><a href="#Spring-Profile-和配置日志记录框架" class="headerlink" title="Spring Profile 和配置日志记录框架"></a>Spring Profile 和配置日志记录框架</h3><ul><li>可以设置不同的配置参数</li><li>可以设置不同的bean的装载</li></ul><p>Active Profile</p><ul><li>同时可以有多个被激活的profile</li><li>有active和default两个概念</li><li>如果没有设置active，则spring使用设置的default，如果没有声明default，则使用那些无显示指定的作为default</li></ul><h3 id="生产环境架构"><a href="#生产环境架构" class="headerlink" title="生产环境架构"></a>生产环境架构</h3><p>性能调优</p><ul><li>前端：数据缓存；加载顺序；显示顺序；预先加载；</li><li>NGINX: 设置客户端缓存；数据压缩传输；HTTP2.0</li><li>应用：优化算法；优化SQL（慢SQL）；避免N+1查询；异步操作；使用缓存；不常修改数据的静态化；集群；</li><li>数据库：索引和统计信息；优化表结构；冗余列和计算列；表拆分；分区表；统计慢SQL（提供程序）；SQL优化建议；升级硬件；</li></ul><h3 id="以服务程序运行（ubuntu）"><a href="#以服务程序运行（ubuntu）" class="headerlink" title="以服务程序运行（ubuntu）"></a>以服务程序运行（ubuntu）</h3><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="在-Spring-Boot-项目中使用Servlet-Filter-Listener等"><a href="#在-Spring-Boot-项目中使用Servlet-Filter-Listener等" class="headerlink" title="在 Spring Boot 项目中使用Servlet,Filter,Listener等"></a>在 Spring Boot 项目中使用Servlet,Filter,Listener等</h3><p>Servlet  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(name=&quot;QrcodeServlet&quot;, urlPatterns=&quot;/servlet/qrcode&quot;)</span><br><span class="line">public class QrcodeServlet extends HttpServlet implements Serializable&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter</span><br><span class="line">public class LogFilter implements Filter &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ServletComponentScan 注解<br>@ComponentScan  </p><h3 id="Autowired-的加载规则"><a href="#Autowired-的加载规则" class="headerlink" title="Autowired 的加载规则"></a>Autowired 的加载规则</h3><p>@Autowired</p><ul><li>查找被注解的变量类型，找到所有此类型的构建或此类型子类的构建。</li><li>如果一个也没有找到，看required参数，false则用null，true则失败（默认）。</li><li>如果仅找到一个，则装载这个构件。</li><li>如果找到多个，且只有一个有@Primary注解，使用Primary的。</li><li>如果不符合上述条件，失败。</li></ul><p>@Autowired @Qualifier</p><ul><li>如果属性既有Autowired注解又有Qualifier注解</li><li>在构件中查找名字为Qualifier中指定的名字的注解。</li><li>在构件上指定名字的方法有两个，@Service(“这里写名字”)，@Qualifier(“这里写名字”)。</li></ul><h3 id="API-的版本"><a href="#API-的版本" class="headerlink" title="API 的版本"></a>API 的版本</h3><p>客户端传递版本信息方式</p><ul><li>URL</li><li>RequestHeader</li></ul><p>URL</p><ul><li>部署，通过修改NGINX配置，不同域名，不同前缀。</li><li>修改application.yml中的contextPath，server.servlet.contextPath:/tutorial-v2</li><li>修改@RequestMapping中的参数，例如，@RequestMapping(“/v1/tvseries”)</li><li>增加request的参数，例如：/tvseries?version=2</li></ul><p>Request Header  </p><ul><li>自定义request header，例如：Version:2</li><li>使用Accept  Accept:application/vnd.tutorial.v2 + json</li></ul><p>自定义 RequestMappingHandlerMapping  </p><ul><li>自定义ApiVersion注解</li><li>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</li></ul><h3 id="定制Spring-REST的错误返回信息"><a href="#定制Spring-REST的错误返回信息" class="headerlink" title="定制Spring REST的错误返回信息"></a>定制Spring REST的错误返回信息</h3><p>Controller中单独处理</p><ul><li>把返回值改成ResponseEntity<t></t></li><li>T为要返回的内容</li><li>通过ResponseEntity来设置返回的HttpResponse状态码</li></ul><p>全局的异常处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">public class ExceptionHandler &#123;</span><br><span class="line">    @ExceptionHandler(Throwable.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    ResponseEntity&lt;Object&gt; handleControllerException(Throwable ex, WebRequest request) &#123;</span><br><span class="line">        //处理异常，并设置给客户端反馈的信息</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Spring" scheme="http://yeonsea.club/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yeonsea.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>赠药山高僧惟俨二首</title>
    <link href="http://yeonsea.club/2018/12/23/%E8%B5%A0%E8%8D%AF%E5%B1%B1%E9%AB%98%E5%83%A7%E6%83%9F%E4%BF%A8%E4%BA%8C%E9%A6%96/"/>
    <id>http://yeonsea.club/2018/12/23/赠药山高僧惟俨二首/</id>
    <published>2018-12-23T11:11:58.000Z</published>
    <updated>2018-12-23T12:11:43.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/12/23/赠药山高僧惟俨二首/../赠药山高僧惟俨二首/赠药山高僧惟俨二首.jpeg"></p><blockquote><p>练得身形如鹤形，千株松下两函经。我来问道无馀说，云在青霄水在瓶。</p></blockquote><blockquote><p>选得幽居惬野情，终年无送亦无迎。有时直上孤峰顶，月下披云啸一声。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Tao" scheme="http://yeonsea.club/categories/Tao/"/>
    
    
      <category term="Tao" scheme="http://yeonsea.club/tags/Tao/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yeonsea.club/2018/12/22/hello-world/"/>
    <id>http://yeonsea.club/2018/12/22/hello-world/</id>
    <published>2018-12-22T15:53:34.885Z</published>
    <updated>2018-12-23T12:12:50.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/12/22/hello-world/../hello-world/hello-world.jpg"></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
